name: 'Deploy Helix World'

description: 'Uploads a Helix automatically'
inputs:
  access_token:
    description: 'Access token for authentication. Can be generated at Account -> Settings'
    required: true
  world_name:
    description: 'Name of the world to upload. Make sure you already have this world created. If not set a world will be created'
    required: false
    default: ''
  packages_path:
    description: 'Path to the packages directory. Defaults to the current directory'
    required: false
  private_ssh_key:
    description: 'Private SSH key for authentication in github'
    required: false
  master_endpoint:
    description: 'Defaults to https://api.helixgame.com/v1'
    required: false
    default: 'https://api.helixgame.com/v1'
  ref:
    description: 'Optional git ref to checkout to'
    required: false
    default: ''
  config_toml_path:
    description: '[EXPERIMENTAL] Path to config.toml to parse dependencies from'
    required: false

  # Here be dragons
  gamemap:
    description: "Game map"
    required: false
  gamemode:
    description: "Game mode"
    required: false
  title:
    description: "Title of the game"
    required: true
  description:
    description: "Description of the game"
    required: false
  max_players:
    description: "Maximum number of players"
    required: false
  type_id:
    description: "Type ID"
    required: false
  metadata:
    description: "Metadata for the game"
    required: false
  public_settings:
    description: "Public settings"
    required: false
  tags:
    description: "Comma-separated list of tags"
    required: false
  instanceable:
    description: "Whether the game is instanceable"
    required: false
  matchmaking:
    description: "Enable matchmaking"
    required: false
  min_players:
    description: "Minimum number of players"
    required: false
  password:
    description: "Game password"
    required: false
  allow_universal_items:
    description: "Allow universal items"
    required: false
  max_visitor:
    description: "Maximum visitors"
    required: false
  fqdn:
    description: "Fully qualified domain name"
    required: false
  nft_allowlist:
    description: "NFT allowlist"
    required: false
  use_nft_allowlist:
    description: "Use NFT allowlist"
    required: false
  allowlist:
    description: "Enable allowlist"
    required: false
  loading_screen:
    description: "Loading screen"
    required: false
  is_public:
    description: "Is the world public"
    required: false
  links:
    description: "Links for what? I don't know I think it is like social media links"
    required: false
  package_deps:
    description: "Package dependencies"
    required: false
  full_description:
    description: "Full description of the game"
    required: false
  can_join_during_match:
    description: "Can players join during match"
    required: false
outputs:
  world_id:
    description: "World ID that was uploaded"
    value: ${{ steps.get_world_info.outputs.world_id }}
  world_name:
    description: "World Name that was uploaded"
    value: ${{ steps.get_world_info.outputs.world_name }}

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 1
        ref: ${{ inputs.ref }}

    - name: Update Submodules
      shell: bash
      env:
        PRIVATE_SSH_KEY: ${{ inputs.private_ssh_key }}
      run: |
        if [ -z "$PRIVATE_SSH_KEY" ]; then
          echo "Skipping private repository setup"
        else
          echo "Configuring git for private github repositories"
          eval `ssh-agent -s`
          ssh-add - <<< "$PRIVATE_SSH_KEY"
        fi
        git submodule sync
        git submodule update --init --recursive --remote

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get install -y jq python3-pip
        pip3 install yq

    - name: Find and delete .git and .github folders
      shell: bash
      run: |
        echo "Searching for .git and .github folders"
        find . -type d -name ".git" -exec rm -rf {} +
        find . -type d -name ".github" -exec rm -rf {} +
        echo "Folders deleted successfully!"

    - name: Parse Config.toml
      if: ${{ inputs.config_toml_path }} != ''
      shell: bash
      id: parse_toml
      env:
        CONFIG_TOML_PATH=${{ inputs.config_toml_path }}
      run: |
        SERVER_NAME=$(yq eval '.server.name' $CONFIG_TOML_PATH)
        SERVER_DESCRIPTION=$(yq eval '.server.description' $CONFIG_TOML_PATH)
        GAME_MODE=$(yq eval '.world.game_mode' $CONFIG_TOML_PATH)
        MAP=$(yq eval '.world.map' $CONFIG_TOML_PATH)
        PACKAGES_JSON="{"
        for package in $(yq eval '.world.packages[]' $CONFIG_TOML_PATH); do
          PACKAGES_JSON+="\"$package\": \"latest\","
        done
        PACKAGES_JSON=$(echo $PACKAGES_JSON | sed 's/,$//')"}"
        ASSETS_ARRAY="["
        for asset in $(yq eval '.world.assets[]' $CONFIG_TOML_PATH); do
          ASSETS_ARRAY+="$asset,"
        done
        ASSETS_ARRAY=$(echo $ASSETS_ARRAY | sed 's/,$//')"]"
        echo "world_name=$SERVER_NAME" >> $GITHUB_OUTPUT
        echo "world_description=$SERVER_DESCRIPTION" >> $GITHUB_OUTPUT
        echo "gamemode=$GAME_MODE" >> $GITHUB_OUTPUT
        echo "gamemap=$MAP" >> $GITHUB_OUTPUT
        echo "assets=$ASSETS_ARRAY" >> $GITHUB_OUTPUT
        echo "packages=$PACKAGES_JSON" >> $GITHUB_OUTPUT


    - name: Zip repository
      shell: bash
      env:
        PACKAGES_PATH: ${{ inputs.packages_path || '.' }}
      run: |
        ORIGINAL_CWD=$(pwd)
        cd "$PACKAGES_PATH"
        if [ -d "Packages" ]; then
          zip -r main.zip Packages
          mv main.zip "$ORIGINAL_CWD" || true
        else
          echo "Directory 'Packages' does not exist in $PACKAGES_PATH"
          exit 1
        fi

    - name: Create World 
      id: create_world
      if: ${{ inputs.world_name }} == ''
      shell: bash
      env:
        ACCESS_TOKEN: ${{ inputs.access_token }}
        MASTER_ENDPOINT: ${{ inputs.master_endpoint }}
        GAMEMAP: ${{ inputs.gamemap || steps.parse_toml.outputs.gamemap }}
        GAMEMODE: ${{ inputs.gamemode || steps.parse_toml.outputs.gamemode }}
        TITLE: ${{ inputs.title || steps.parse_toml.outputs.world_name }}
        DESCRIPTION: ${{ inputs.description || steps.parse_toml.outputs.world_description }}
        MAX_PLAYERS: ${{ inputs.max_players }}
        TYPE_ID: ${{ inputs.type_id }}
        METADATA: ${{ inputs.metadata }}
        # We can get this from Config.toml
        PUBLIC_SETTINGS: ${{ inputs.public_settings }}
        TAGS: ${{ inputs.tags }}
        INSTANCEABLE: ${{ inputs.instanceable }}
        MATCHMAKING: ${{ inputs.matchmaking }}
        MIN_PLAYERS: ${{ inputs.min_players }}
        PASSWORD: ${{ inputs.password }}
        ALLOW_UNIVERSAL_ITEMS: ${{ inputs.allow_universal_items }}
        MAX_VISITOR: ${{ inputs.max_visitor }}
        FQDN: ${{ inputs.fqdn }}
        NFT_ALLOWLIST: ${{ inputs.nft_allowlist }}
        USE_NFT_ALLOWLIST: ${{ inputs.use_nft_allowlist }}
        ALLOWLIST: ${{ inputs.allowlist }}
        LOADING_SCREEN: ${{ inputs.loading_screen }}
        IS_PUBLIC: ${{ inputs.is_public }}
        LINKS: ${{ inputs.links }}
        PACKAGE_DEPS: ${{ inputs.package_deps || steps.parse_toml.outputs.packages }}
        FULL_DESCRIPTION: ${{ inputs.full_description }}
        CAN_JOIN_DURING_MATCH: ${{ inputs.can_join_during_match }}
      run: |
        RANDOM_DESCRIPTION=$(head /dev/urandom | base64 | head -c 32)
        RANDOM_TITLE=$(head /dev/urandom | base64 | head -c 16)
        [[ -z "$TITLE" ]] && TITLE=$RANDOM_TITLE
        [[ -z "$DESCRIPTION" ]] && DESCRIPTION=$RANDOM_DESCRIPTION
        json_payload="{"
        [ ! -z "$GAMEMAP" ] && json_payload+="\"gamemap\": \"$GAMEMAP\","
        [ ! -z "$GAMEMODE" ] && json_payload+="\"gamemode\": \"$GAMEMODE\","
        [ ! -z "$TITLE" ] && json_payload+="\"title\": \"$TITLE\","
        [ ! -z "$DESCRIPTION" ] && json_payload+="\"description\": \"$DESCRIPTION\","
        [ ! -z "$MAX_PLAYERS" ] && json_payload+="\"max_players\": $MAX_PLAYERS,"
        [ ! -z "$TYPE_ID" ] && json_payload+="\"type_id\": $TYPE_ID,"
        [ ! -z "$METADATA" ] && json_payload+="\"metadata\": $METADATA,"
        [ ! -z "$PUBLIC_SETTINGS" ] && json_payload+="\"public_settings\": $PUBLIC_SETTINGS,"
        [ ! -z "$TAGS" ] && json_payload+="\"tags\": $(echo "$TAGS" | jq -R '[split(",")]'),"
        [ ! -z "$INSTANCEABLE" ] && json_payload+="\"instanceable\": $INSTANCEABLE,"
        [ ! -z "$MATCHMAKING" ] && json_payload+="\"matchmaking\": $MATCHMAKING,"
        [ ! -z "$MIN_PLAYERS" ] && json_payload+="\"min_players\": $MIN_PLAYERS,"
        [ ! -z "$PASSWORD" ] && json_payload+="\"password\": \"$PASSWORD\","
        [ ! -z "$ALLOW_UNIVERSAL_ITEMS" ] && json_payload+="\"allow_universal_items\": $ALLOW_UNIVERSAL_ITEMS,"
        [ ! -z "$MAX_VISITOR" ] && json_payload+="\"max_visitor\": $MAX_VISITOR,"
        [ ! -z "$FQDN" ] && json_payload+="\"fqdn\": \"$FQDN\","
        [ ! -z "$NFT_ALLOWLIST" ] && json_payload+="\"nft_allowlist\": \"$NFT_ALLOWLIST\","
        [ ! -z "$USE_NFT_ALLOWLIST" ] && json_payload+="\"use_nft_allowlist\": $USE_NFT_ALLOWLIST,"
        [ ! -z "$ALLOWLIST" ] && json_payload+="\"allowlist\": $ALLOWLIST,"
        [ ! -z "$LOADING_SCREEN" ] && json_payload+="\"loading_screen\": \"$LOADING_SCREEN\","
        [ ! -z "$IS_PUBLIC" ] && json_payload+="\"is_public\": $IS_PUBLIC,"
        [ ! -z "$LINKS" ] && json_payload+="\"links\": $LINKS,"
        [ ! -z "$PACKAGE_DEPS" ] && json_payload+="\"package_deps\": $PACKAGE_DEPS,"
        [ ! -z "$FULL_DESCRIPTION" ] && json_payload+="\"full_description\": \"$FULL_DESCRIPTION\","
        [ ! -z "$CAN_JOIN_DURING_MATCH" ] && json_payload+="\"can_join_during_match\": $CAN_JOIN_DURING_MATCH,"
        json_payload=$(echo "$json_payload" | sed 's/,$//')"}"
        echo "Generated JSON Payload: $json_payload"
        response=$(curl --location "${MASTER_ENDPOINT}/world" --header 'Content-Type: application/json' --header "Token: ${ACCESS_TOKEN}" --data "$json_payload")
        echo "world_id=$(echo $response | jq -r '.payload.id')" >> $GITHUB_OUTPUT
        echo "world_name=$(echo $response | jq -r '.payload.name')" >> $GITHUB_OUTPUT

    - name: Get World Info
      id: get_world_info
      shell: bash
      env:
        WORLD_NAME: ${{ inputs.world_name || steps.create_world.outputs.world_name }}
        WORLD_ID: ${{ steps.create_world.outputs.world_id }}
        ACCESS_TOKEN: ${{ inputs.access_token }}
        MASTER_ENDPOINT: ${{ inputs.master_endpoint || 'https://api.helixgame.com/v1' }}
      run: |
        if [ "$WORLD_ID" != "" ]; then
          response=$(curl --location "${MASTER_ENDPOINT}/world/${WORLD_NAME}" --header "Token: ${ACCESS_TOKEN}")
          echo "world_id=$(echo $response | jq -r '.payload.id')" >> $GITHUB_OUTPUT
          echo "world_name=$(echo $response | jq -r '.payload.name')" >> $GITHUB_OUTPUT
          exit 0
        fi
        echo "world_id=$(echo $response | jq -r '.payload.id')" >> $GITHUB_OUTPUT
        echo "world_name=$(echo $response | jq -r '.payload.name')" >> $GITHUB_OUTPUT

    - name: Request presigned URL
      id: presigned_url
      shell: bash
      env:
        ACCESS_TOKEN: ${{ inputs.access_token }}
        WORLD_ID: ${{ steps.get_world_info.outputs.world_id }}
        MASTER_ENDPOINT: ${{ inputs.master_endpoint }}
      run: |
        response=$(curl --location "${MASTER_ENDPOINT}/world/upload/packages/${WORLD_ID}" --header "Token: ${ACCESS_TOKEN}")
        code=$(echo $response | jq -r '.code')
        message=$(echo $response | jq -r '.message')
        if [ "$code" != "0" ]; then
          if [ "$message" == "world corrupted" ]; then
            echo "Error: Make sure you've created this world on the HELIX Hub first: https://hub.helixgame.com/creations/worlds"
          else
            echo "Error: Server returned error code $code with message '$message'"
          fi
          exit 1
        fi
        echo "upload_url=$(echo $response | jq -r '.payload.upload_url')" >> $GITHUB_OUTPUT
        echo "world_url=$(echo $response | jq -r '.payload.world_url')" >> $GITHUB_OUTPUT

    - name: Upload zip file
      shell: bash
      env:
        UPLOAD_URL: ${{ steps.presigned_url.outputs.upload_url }}
      run: |
        curl --location --request PUT "${UPLOAD_URL}" \
          --header "Content-Type: application/zip" \
          --data-binary "@main.zip"

    - name: Finish upload
      shell: bash
      env:
        ACCESS_TOKEN: ${{ inputs.access_token }}
        WORLD_URL: ${{ steps.presigned_url.outputs.world_url }}
        WORLD_ID: ${{ steps.get_world_info.outputs.world_id || steps.create_world.outputs.world_id }}
        MASTER_ENDPOINT: ${{ inputs.master_endpoint || 'https://api.helixgame.com/v1' }}
      run: |
        echo $WORLD_ID
        curl --location "${MASTER_ENDPOINT}/world/upload/packages/finish?url=${WORLD_URL}&world_id=${WORLD_ID}" --header "Token: ${ACCESS_TOKEN}"

    - name: Adds Assets
      id: patch_world
      if: ${{ steps.parse_toml.outputs.assets }} != ''
      shell: bash
      env:
        ACCESS_TOKEN: ${{ inputs.access_token }}
        MASTER_ENDPOINT: ${{ inputs.master_endpoint }}
        WORLD_ID: ${{ steps.get_world_info.outputs.world_id || steps.create_world.outputs.world_id }}
        ASSETS: ${{ steps.parse_toml.outputs.assets }}
      run: |
        json_payload="{"
        json_payload+="\"world_id\": \"$WORLD_ID\","
        json_payload+="\"assets\": \"$ASSETS\","
        json_payload=$(echo "$json_payload" | sed 's/,$//')"}"
        echo "Generated JSON Payload: $json_payload"
        response=$(curl --location "${MASTER_ENDPOINT}/world" --header 'Content-Type: application/json' --header "Token: ${ACCESS_TOKEN}" --data "$json_payload")

